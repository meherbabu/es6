First we need to decide whether the searchbar should be a Component or Container.
SearchBar should have the ability to modify the state of the application by dispatching actions.
We need to call an actionCreator that makes an API request,so it definitely needs to talk to Redux so definitely it should be a container
Bcoz container has the ability to talk to Redux where as a normal component does not.
normal component just shows some content on the screen.

When user clicks on a Button -> Action Creator (Returns an action) 
						  -> MiddleWare (Lets action pass, manipulates it, logs it, or stops it) 
						  -> Reducers (Action automatically sent to all Reducers)













Containers and Reducers:
------------------------------------
Redux is for managing application state and React is for rendering the components.
Redux serves to construct the application state and React provides the views to display that state.
The 2 libraries are inherently disconnected and its only through the use of react-redux, we get clear connection between the two.
Container: A Container is a component that has direct access to the state thats produced by Redux.
Application state is generated by reducer functions. A reducer is a function that returns a piece of application state
We will create a BooksReducer function that return the list of books and we add that BooksReducer to the combineReducer function in index.js file in reducers folder

We created a React component called BookList and later we decided to promote it to a Container since its gonna have State from Redux.

Redux generated a state object that contained our books and then mapped that state as props to our component.

How to promote a React component to a Container:
------------------------------------------------------------------------
import {connect} from 'react-redux';
define a function mapStateToProps(state) { return { books: state.books} };
export default connect (mapStateToProps)(BookList);

the data/state generated from reducer is mapped to the BookList React component using the mapStateToProps function.
A container is a normal react component that gets bonded to the application state.

We centralize all of our application's data in a single object. This is the main difference between Redux and other frameworks.

Controlled Field:
----------------------
A Controlled Field is a form element with the value of the input set by the state of the component not the other way around.

We get some free functionality when we use a Form element in HTML..like..	
	when user clicks Enter, form will be submitted. We neednt write an event handler for this.

Redux-Promise:
--------------------
Redux Promise is a middleware component. 
1. As part of the action creator component, we will make an ajax request using axios library which returns a Promise
2. The above action is returned and it will be run through all the reducers
3. Before its being sent to all the reducers, Redux Promise comes in middle and acts as a middleware component and gets the actual data from Promise and then updates
    the associated action and is sent to the Reducers.










